#!/usr/bin/env node
const exec = require('child_process').exec;
const path = require('path');
const util = require('util');
const fs = require('fs');
const async = require('async');

// ./scripts/extract-pot --locale locale server static
// Given a locale directory to write out pot files and
// 1 or more directories to find sources in, run
// .js and template (.ejs) files through jsxgettext

const argv = require('optimist').demand(['l'])
	.usage('Extract gettext strings from codebase. Usage: $0 --locale=DIRECTORY INPUT_DIR [INPUT_DIR]*')
	.alias('h', 'help')
	.describe('h', 'display this usage message')
	.alias('l', 'locale')
	.describe('l', 'locale directory where pot and po files will be written')
	.describe('exclude', 'directory or filename pattern to exclude from jsxgettext\n\t\tmay be used multiple times')
	.alias('t', 'template-engine')
	.default('t', 'ejs')
	.describe('template-engine', 'Template engine. Defaults to EJS, Jinja supported for nunjucks')
	.alias('f', 'template-file-ext')
	.default('f', 'ejs')
	.describe('template-file-ext', 'File extension of templates. Defaults to ejs as in home.ejs, value can be valid file ext.')
	.check(argv => {
		// We have atleast one directory of source code to process
		return argv._.length >= 1;
	}).argv;

const localeDir = path.resolve(process.cwd(), argv.locale);
const sourceDirs = [];

argv._.forEach(dir => {
	sourceDirs.push(path.resolve(process.cwd(), dir));
});

// Top of repo is our current working directory
process.chdir(path.dirname(__dirname));

let jsxGettextPath;
try {
	// For npm v2 directory structure.
	fs.accessSync(path.join(__dirname, '../node_modules/.bin/jsxgettext'), fs.F_OK);
	jsxGettextPath = path.join(__dirname, '../node_modules/.bin/jsxgettext');
} catch (err) {
	// For npm v3 flat directory structure.
	jsxGettextPath = path.join(__dirname, '../../.bin/jsxgettext');
}

let jsCmd = jsxGettextPath + ' %s --keyword=_ -L JavaScript ' +
'--output-dir=%s/templates/LC_MESSAGES --output=messages.pot ' +
'`find %s -name \'*.js\' | grep -v node_modules | grep -v "\\.git"';

let templateCmd = jsxGettextPath + ' %s --keyword=_ -L ' + argv['template-engine'] +
' --output-dir=%s/templates/LC_MESSAGES --output=messages.pot ' +
'`find %s -name \'*.%s\' | grep -v node_modules | grep -v "\\.git"';

if (argv.exclude) {
	let excludes = argv.exclude;
	if (typeof argv.exclude === 'string') {
		excludes = [argv.exclude];
	}

	excludes.forEach(exclude => {
		jsCmd += ' | grep -v ' + exclude;
		templateCmd += ' | grep -v ' + exclude;
	});
}

const templateExt = argv['template-file-ext'];
// Close out `find ...` backtick
jsCmd += '`';
templateCmd += '`';

// Create a new .pot file
let dashJ = '';

// Run commands
async.forEachSeries(sourceDirs, dir => {
	exec(util.format(jsCmd, dashJ, localeDir, dir), (err, stdout, stderr) => {
		// Join existing pot file
		dashJ = ' --join-existing';
		// We expect an error if no gettext strings are used in client side code
		if (err && stdout.indexOf('input argument is required') === -1) {
			console.error(stdout);
			console.error(stderr);
		} else {
			console.log(util.format(templateCmd, dashJ, localeDir, dir, templateExt));
			exec(util.format(templateCmd, dashJ, localeDir, dir, templateExt), (err, stdout, stderr) => {
				if (err) {
					console.error(stdout);
					console.error(stderr);
				}
				console.log('done');
			});
		}
	});
}, err => {
	if (err) {
		console.error(err);
	}
});
